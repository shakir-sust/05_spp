---
title: "Assignment 6 - Split-plot randomization"
author: "Md Shakir Moazzem"  
format:
  html:
    code-fold: true 
    embed-resources: true
    toc: true
    number-sections: true
    theme: cerulean
---

# Introduction  
This assignment will ask you to conduct a split-plot RCBD randomization. 

For that, you will first need to watch (and code along with) the following split-plot randomization video:

- split-plot randomization: https://youtu.be/rXTp3Vw_770?si=MajBK1aZ221orfpa&t=3401 (starts at 00:56:41, watch till end, about 50-min total)

- The partial script for the video above is in our GitHub repository, 04-classcode, **02-13_spp_randomization_partial.qmd**.


**AFTER watching the video and developing the code in class**, then start working on this HW assignment.  

The different sections representing what we did in class were left in the script to provide you a scaffold to start from.  

# Instructions  
  - Move this script into the `code` subfolder of your `05_spp` project folder  
  - On this script, fill your name under the `title` section of the YAML  
  
# Goal of this assignment  
The goal is this assignment is for you to **design a split-plot RCBD design applicable to your area of study**.  

This could be from your own experience, an example from the literature, or something you come up entirely on your own (as long as it makes sense).  

In the headings below, you will answer a couple of questions related to study objectives and treatment design, and then move on to randomize your study, create a plot layout, and export the designed table to file.  

# Setup  
Here is where we load the packages we will use.  
Make sure to load each package in the chunk below.  
```{r setup, warning=FALSE, message=FALSE}
# Installing packages
#install.packages("tidyverse")
# Loading packages
library(tidyverse) # for data wrangling and plotting
```


# Treatment design  
## Objectives  
Write here what are the objectives of the study you are designing. Remember that objectives are closely connected with your treatment design, so whatever you say are your objectives should carry through on your choice of treatment factors and levels.  

**Answer:** The objective is to investigate the effect of K (potassium) fertilizer rates (with 3 levels: 0, 20, 40 kg K/ha) and P (phosphorus) fertilizer rates (with 3 levels: 0, 50, 100 kg P/ha) on the yield (kg/ha) of corn within a split plot design with 4 blocks due to limited resources. To this end, we aim to investigate the significance of the main effects of K (potassium) fertilizer rate and P (phosphorus) fertilizer rate along with the interaction effect of K rate*P rate for a split-plot RCBD model with 4 blocks. Hence, we will begin by creating a plot layout of the split-plot design with K rate as whole plot factor and P rate as split-plot factor for the 4 blocks.

## Treatment design explanation  
Here is where you explain your treatment design, including the name of the treatment factors, their levels (don't forget to include units), and which is the whole-plot treatment factor and which one is the split-plot treatment factor.  

**Answer:**  

- 2-way factorial **in a split-plot**  
- Number of **blocks**: 4\
- **Whole-plot** treatment factor: K fertilizer rates: 0, 20, 40 kg K/ha\
- **Split-plot** treatment factor: P fertilizer rates: 0, 50, 100 kg P/ha\
- 3 x 3 = **9 treatment combinations** that will be assigned to different sizes of experimental units!

## Code  
Here develop the code to setup your design (like in class).   


# Split-plot in RCBD  
## WP randomization  
First, let's randomize the whole-plot treatment factor (K rate) to the blocks.  

Here, we are calling it **block** (instead of rep) because the concept of rep in a split-plot depends on which split level (whole-plot or split-plot) we are talking about.  

**Very important note:**

**In a split-plot RCBD, the block is still the level of replication for the whole-plot treatment factor. For the split-plot treatment factor, replication is at the block x WP level.**  

```{r wp_rcbd_rand, warning=FALSE, message=FALSE}

# Setting seed to get same randomization result every time

set.seed(309) #we use "set.seed" for the sake of reproducibility so that the randomization does not shuffle and we get the exact same order of randomization each time we run this code chunk

#Data wrangling

wp_rcbd_rand <- crossing(krate_kgha = c(0,20,40),#c(0,20,40) to indicate 3 levels of potassium rate # I want to create all possible combinations of these 3 treatments with the blocks
                         block = 1:4 #To create 4 blocks
                         ) %>% #"crossing()" function gets all the combinations of two or more different things #
  arrange(block) %>% #to sort the block column by block numbers
  # Randomizing WP treatment factor to blocks (restricted) 
  group_by(block) %>% #to group by blocks
  mutate(krate_kgha = sample(krate_kgha)) %>% #"sample()" function shuffles/randomizes thing for us #To randomize the "krate_kgha" within each block
    # Creating WP plot numbers 
  mutate(wplot = (block*100)+ 1:3) %>% #"1:3" to add 1 to 3 within each combination of block numbers
  ungroup() #To ungroup the data set i.e., to remove "Groups: block [4]" i.e., to remove the grouping structure from behind the scene

wp_rcbd_rand
```


## SP randomization  

Now, let's randomize the split-plot treatment factor (N rate) to the WP treatment plots.  

```{r sp_rcbd_rand, warning=FALSE, message=FALSE}

sp_rcbd_rand  <- crossing(prate_kgha = c(0,50,100), #c(0,50,100) to indicate 3 levels of phosphorus rate # I want to create all possible combinations of these 3 phosphorus treatments with the whole plots
                          wplot = wp_rcbd_rand$wplot #To extract whole plots from the "wp_rcbd_rand" dataset that we previously created
                          ) %>%
  arrange(wplot) %>% #to sort the whole plot column by whole plot numbers
  # Randomizing SP treatment factor to WP plots (restricted)
  group_by(wplot) %>% #to group by whole plots
  mutate(prate_kgha = sample(prate_kgha)) %>% #"sample()" function shuffles/randomizes thing for us #to randomize whole plots according to phosphorus levels #To randomize the "prate_kgha" within each whole plot #Here, I should NOT see the same phosphorus rate (for example, 0; I should not see 0 again) within the same whole plot
  # Creating SP plot numbers 
  mutate(splot = paste0(wplot, "-", 1:3)) %>% #We use "paste0()" function to combine strings i.e., to combine different values from different columns
  ungroup() #To ungroup the data set i.e., to remove "Groups: wplot [12]" i.e., to remove the grouping structure from behind the scene


sp_rcbd_rand
```
## Joining WP and SP into one object

```{r spp_rcbd_rand, warning=FALSE, message=FALSE}
spp_rcbd_rand <- wp_rcbd_rand %>%
  right_join(sp_rcbd_rand) %>% #We want to have 36 rows, not only 12. Because of that, we are gonna use "right_join()" instead of "left_join()". For "left_join()", it looks on the data set on the left of the pipe (spp_rcbd_rand <- wp_rcbd_rand), and then looks on the right side of the pipe (sp_rcbd_rand), then join them with the frame on the left of the pipe. So, if the data frame on the left starts with 12 rows, the combined data frame will have 12 rows. For "right_join()", it's the opposite. In this case, we are using the data frame which has 36 rows as our basis to merge. That's why we are using "right_join()" which will result in a merged data frame with 36 rows.
  mutate(trtname = paste0(krate_kgha, "+", prate_kgha)) #to create a new column "trtname" in the dataset, which indicates the combination of "krate_kgha" and "prate_kgha"

spp_rcbd_rand
```

Let's inspect block 1.  

```{r, warning=FALSE, message=FALSE}
spp_rcbd_rand  %>%
  filter(block == 1) #In the output, we have 9 rows because we have 9 split plot experimental units, with only 3 whole plot experimental units. This filtering is done to check that there is only 1 level of potassium (for example, 40) within each block for all 3 whole plots (e.g., 101, 102, 103) with all 3 levels of phosphorus rate in the same block
```

In the output, we have 9 rows because we have 9 split plot experimental units, with only 3 whole plot experimental units. This filtering is done to check that there is only 1 level of potassium (for example, 40) within each block for all 3 whole plots (e.g., 101, 102, 103) with all 3 levels of phosphorus rate in the same block

## Plot layout  

```{r spp_rcbd_layout, warning=FALSE, message=FALSE}
spp_rcbd_layout <- spp_rcbd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  mutate(row = rep(1:4, each = 9)) %>%
  mutate(col = rep(seq(from = 1, 
                       to = 9, #total number of treatments, 
                       by = 1), 
                   times = 4 #total number of blocks = 4
  )) %>%
  # Creating plot and trtname labels for plotting
  mutate(lab = paste0(splot, "\n", trtname))

spp_rcbd_layout
```

Now, let's plot it.
```{r spp rcbd map, warning=FALSE, message=FALSE}

ggplot(data = spp_rcbd_layout, aes(x = row, 
                                   y = -col)) +
  geom_tile(aes(fill = factor(prate_kgha)),
            color = "black",
            show.legend = F
            ) +
  geom_tile(aes(color = krate_kgha),
            show.legend = F,
            size = 2,
            linetype = 2,
            fill = NA
            ) +
  
  scale_fill_manual(values = c("#e5f0db",
                               "#b1d095",
                               "#5e813f")) +
  
  geom_text(aes(label = splot), fontface = "bold", vjust = -.8) +
  geom_text(aes(label = trtname), vjust = 1) +
  labs(title = "Split-plot RCBD randomization of a \n 3 K (whole-plot) x 3 P (split-plot) treatment design") + #"\n" is used to break line
  theme_void()

```
Important note:

  - Each K rate treatment was randomized within each block first, where each WP experimental unit comprises 3 cells. 
  
  - Each N rate treatment was randomized within each WP EU, where each SP experimental unit comprises 1 cell.  

# Exporting to file  

If this is in fact your study, you may want to export both the field randomization table AND the layout map.  

Let's do that below for the RCBD example.  

```{r, warning=FALSE, message=FALSE}
spp_rcbd_rand %>%
  # Rearranging columns  
  dplyr::select(block, wplot, krate_kgha, 
                splot, prate_kgha,
                trtname) %>%
  write_csv("../output/spp_rcbd_randomization_assignment_6.csv")

```

`ggsave()` will save the last plot created in the session, even if from an above chunk. Since the last plot we created was the Split-plot RCBD layout, we can just go ahead and call ggsave here.  

```{r, warning=FALSE, message=FALSE}
ggsave("../output/spp_rcbd_layoutmap_assignment_6.png",
       width = 6,
       height = 5,
       bg = "white")
```

# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.  

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE` (I'll demo this in a moment).  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one (I'lld demo this in a moment).  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `Assignment-06-spp-LASTNAME.html`.    

For ex., mine would be `Assignment-06-spp-Bastos.html`.

Submit your work by uploading the **html** file to **eLC Assigment #6 - Split-plot randomization** by Feb 20 11:59 pm.  
  




