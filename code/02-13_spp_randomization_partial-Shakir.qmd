---
title: "Randomization"
format: html
---

# Introduction  
The goals of this exercise are to:  
- Learn how to randomize a split-plot RCBD in R  
- Learn how to create plot layouts with them  

Watch video: - split-plot randomization: https://youtu.be/rXTp3Vw_770?si=MajBK1aZ221orfpa&t=3401 (starts at 00:56:41, watch till end, about 50-min total)

# Setup  
Here is where we load the packages we will use.  
```{r setup}
# Installing packages
#install.packages("tidyverse")
# Loading packages
library(tidyverse) # for data wrangling and plotting
```

# Treatment design  
Keeping with the same motivational example we've been using, our treatment design is:  

-   2-way factorial **in a split-plot**  
-   **Whole-plot** treatment factor: K fertilizer rates: 0, 30, 60 kg K/ha\
-   **Split-plot** treatment factor: N fertilizer rates: 0, 100, 200 kg N/ha\
-   3 x 3 = **9 treatment combinations** that will be assigned to different sizes of experimental units!  

# Split-plot in RCBD  
## WP randomization  
First, let's randomize the whole-plot treatment factor (K rate) to the blocks.  

I decided to call it **block** (instead of rep) because the concept of rep in a split-plot depends on which split level (whole-plot or split-plot) we are talking about.  

In a split-plot RCBD, the block is still the level of replication for the whole-plot treatment factor. For the split-plot treatment factor, replication is at the block x WP level.  

```{r wp_rcbd_rand}

# Setting seed to get same randomization result every time

set.seed(930) #we use "set.seed" for the sake of reproducibility so that the randomization does not shuffle and we get the exact same order of randomization each time we run this code chunk

#Data wrangling

wp_rcbd_rand <- crossing(krate_kgha = c(0,30,60),#c(0,30,60) to indicate 3 levels of potassium rate # I want to create all possible combinations of these 3 treatments with the blocks
                         block = 1:4
                         ) %>% #"crossing()" function gets all the combinations of two or more different things #
  arrange(block) %>% #to sort the block column by block numbers
  # Randomizing WP treatment factor to blocks (restricted) 
  group_by(block) %>% #to group by blocks
  mutate(krate_kgha = sample(krate_kgha)) %>% #"sample()" function shuffles/randomizes thing for us #To randomize the "krate_kgha" within each block
    # Creating WP plot numbers 
  mutate(wplot = (block*100)+ 1:3) %>% #"1:3" to add 1 to 3 within each combination of block numbers
  ungroup() #To ungroup the data set i.e., to remove "Groups: block [4]" i.e., to remove the grouping structure from behind the scene

wp_rcbd_rand
```

How many rows do we have in the object above? Why?  

## SP randomization  
Now, let's randomize the split-plot treatment factor (N rate) to the WP treatment plots.  
```{r sp_rcbd_rand}

sp_rcbd_rand  <- crossing(nrate_kgha = c(0,100,200), #c(0,100, 200) to indicate 3 levels of nitrogen rate # I want to create all possible combinations of these 3 nitrogen treatments with the whole plots
                          wplot = wp_rcbd_rand$wplot #To extract whole plots from the "wp_rcbd_rand" dataset that we previously created
                          ) %>%
  arrange(wplot) %>% #to sort the whole plot column by whole plot numbers
  # Randomizing SP treatment factor to WP plots (restricted)
  group_by(wplot) %>% #to group by whole plots
  mutate(nrate_kgha = sample(nrate_kgha)) %>% #"sample()" function shuffles/randomizes thing for us #to randomize whole plots according to nitrogen levels #To randomize the "nrate_kgha" within each whole plot #Here, I should NOT see the same nitrogen rate (for example, 0; I should not see 0 again) within the same whole plot
  # Creating SP plot numbers 
  mutate(splot = paste0(wplot, "-", 1:3)) %>% #We use "paste0()" function to combine strings i.e., to combine different values from different columns
  ungroup() #To ungroup the data set i.e., to remove "Groups: wplot [12]" i.e., to remove the grouping structure from behind the scene


sp_rcbd_rand
```

## Joining WP and SP into one object
```{r spp_rcbd_rand}
spp_rcbd_rand <- wp_rcbd_rand %>%
  right_join(sp_rcbd_rand) %>% #We want to have 36 rows, not only 12. Because of that, we are gonna use "right_join()" instead of "left_join()". For "left_join()", it looks on the data set on the left of the pipe (spp_rcbd_rand <- wp_rcbd_rand), and then looks on the right side of the pipe (sp_rcbd_rand), then join them with the frame on the left of the pipe. So, if the data frame on the left starts with 12 rows, the combined data frame will have 12 rows. For "right_join()", it's the opposite. In this case, we are using the data frame which has 36 rows as our basis to merge. That's why we are using "right_join()"
  mutate(trtname = paste0(krate_kgha, "+", nrate_kgha)) #to create a new column "trtname" in the dataset, which indicates the combination of "krate_kgha" and "nrate_kgha"

spp_rcbd_rand
```

How many rows in the object above? Why?

Let's inspect block 1.  
```{r}
spp_rcbd_rand  %>%
  filter(block == 1) #In the output, we have 9 rows because we have 9 split plot experimental units, with only 3 whole plot experimental units. This filtering is done to check that there is only 1 level of potassium (for example, 60) within each block for all 3 whole plots (e.g., 101, 102, 103) with all 3 levels of nitrogen rate in the same block
```

Notice wplot and splot columns. What is going on here?  

## Plot layout  
```{r spp_rcbd_layout}
spp_rcbd_layout <- spp_rcbd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  mutate(row = rep(1:4, each = 9)) %>%
  mutate(col = rep(seq(from = 1, 
                       to = 9, #total number of treatments, 
                       by = 1), 
                   times = 4 #total number of blocks
  )) %>%
  # Creating plot and trtname labels for plotting
  mutate(lab = paste0(splot, "\n", trtname))

spp_rcbd_layout
```

Now, let's plot it.
```{r spp rcbd map}

ggplot(data = spp_rcbd_layout, aes(x = row, 
                                   y = -col)) +
  geom_tile(aes(fill = factor(nrate_kgha)),
            color = "black",
            show.legend = F
            ) +
  geom_tile(aes(color = krate_kgha),
            show.legend = F,
            size = 2,
            linetype = 2,
            fill = NA
            ) +
  
    scale_fill_manual(values = c("#e5f0db",
                               "#b1d095",
                               "#5e813f")) +
  
  geom_text(aes(label = splot), fontface = "bold", vjust = -.8) +
  geom_text(aes(label = trtname), vjust = 1) +
  labs(title = "Split-plot RCBD randomization of a\n3 K (whole-plot) x 3 N (split-plot) treatment design") +
  theme_void()

```

Notice how:  
  - Each K rate treatment was randomized within each block first, where each WP experimental unit comprises 3 cells. 
  
  - Each N rate treatment was randomized within each WP EU, where each SP experimental unit comprises 1 cell.  

# Exporting to file  
If this is in fact your study, you may want to export both the field randomization table AND the layout map.  

Let's do that below for the RCBD example.  

```{r}
spp_rcbd_rand %>%
  # Rearranging columns  
  dplyr::select(block, wplot, krate_kgha, 
                splot, nrate_kgha,
                trtname) %>%
  write_csv("../output/spp_rcbd_randomization_table.csv")


```

`ggsave()` will save the last plot created in the session, even if from an above chunk. Since the last plot we created was the RCBD layout, we can just go ahead and call ggsave here.  

```{r}
ggsave("../output/spp_rcbd_layoutmap.png",
       width = 6,
       height = 5,
       bg = "white")
```


